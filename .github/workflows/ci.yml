name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  # Format check for all events
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npm run format:check

  # Lint check for all events
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint

  # Type check for all events
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npm run typecheck

  # Unit tests for all events
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    continue-on-error: true  # Temporarily allow test failures
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npm test
        env:
          NODE_OPTIONS: '--experimental-vm-modules'

  # Build check for all events
  build:
    name: Build Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npm run build

  # Check if we should create a release
  check-release:
    needs: [format, lint, typecheck, test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      current_version: ${{ steps.check.outputs.current_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Check for release conditions
        id: check
        run: |
          # Check if version was manually bumped
          PUBLISHED_VERSION=$(npm view devflow version 2>/dev/null || echo "0.0.0")
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          if [ "$PUBLISHED_VERSION" != "$CURRENT_VERSION" ]; then
            echo "Version manually bumped from $PUBLISHED_VERSION to $CURRENT_VERSION"
            echo "should_release=manual" >> $GITHUB_OUTPUT
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          # Check if there are releasable commits
          elif git log --format=%B -n 50 | grep -qE "^(feat|fix|perf|BREAKING CHANGE):"; then
            echo "Found releasable commits, will auto-release"
            echo "should_release=auto" >> $GITHUB_OUTPUT
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No release needed"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  # Call the reusable release workflow
  release:
    needs: check-release
    if: needs.check-release.outputs.should_release != 'false'
    uses: ./.github/workflows/release.yml
    with:
      release_type: ${{ needs.check-release.outputs.should_release == 'manual' && 'skip' || 'auto' }}
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}